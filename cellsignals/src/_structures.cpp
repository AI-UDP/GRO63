/*
 * Copyright (C) Sandra Sáez Raspeño - All Rights Reserved
 *
  * This file is part of Cellsignals.
 *
 * All information contained in this package is, and remains the property of
 * Sandra Sáez Raspeño. Copy and distribution of CellSignals or any result
 * generated by it is strictly forbidden unless prior written permission is
 * obtained from Sandra Sáez Raspeño.
 */

/**********************************************************************/
/*                                                                    */
/*             AUXILIAR GRID STRUCTURES IMPLEMENTATION                */
/*                                                                    */
/**********************************************************************/

#include "_structures.h"
#include <math.h>

using namespace _structures;

float _structures::_getCentre(unsigned int len, unsigned int cellSize) {
  return (len*cellSize)/2.0;  
}

vp_t _structures::_getVirtual(rp_t real_point, unsigned int len, unsigned int cellSize) {
  rp_t centre;
  centre.x = centre.y = _getCentre(len, cellSize);

  vp_t virtualP;
  virtualP.x = centre.x+real_point.x;
  virtualP.y = centre.y+real_point.y;

  return virtualP;
}

sector_t _structures::_getSector(vp_t virtual_point, unsigned int cellSize) {
  sector_t sector;
  sector.col = (unsigned int)floor(virtual_point.x/cellSize);
  sector.row = (unsigned int)floor(virtual_point.y/cellSize);

  return sector;
}

vp_t _structures::_getTopV(rp_t real_point, unsigned int len, unsigned int cellSize) {
  rp_t rTop;
  rTop.x = real_point.x - real_point.lengthX;
  rTop.y = real_point.y - real_point.lengthY;
  rTop.lengthX = rTop.lengthY = 0.0;

  vp_t vTop = _getVirtual(rTop, len, cellSize);

  return vTop;
}

vp_t _structures::_getBottomV(rp_t real_point, unsigned int len, unsigned cellSize) {
  rp_t rBottom;
  rBottom.x = real_point.x + real_point.lengthX;
  rBottom.y = real_point.y + real_point.lengthY;
  rBottom.lengthX = rBottom.lengthY = 0.0;

  vp_t vBottom = _getVirtual(rBottom, len, cellSize);

  return vBottom;
}

sector_t _structures::_getTop(rp_t real_point, unsigned int len, unsigned int cellSize){
  rp_t rTop;
  rTop.x = real_point.x - real_point.lengthX;
  rTop.y = real_point.y - real_point.lengthY;
  rTop.lengthX = rTop.lengthY = 0.0;

  vp_t vTop = _getVirtual(rTop, len, cellSize);
  sector_t sector = _getSector(vTop, cellSize);

  return sector;
}

sector_t _structures::_getBottom(rp_t real_point, unsigned int len, unsigned int cellSize) {
  rp_t rBottom;
  rBottom.x = real_point.x + real_point.lengthX;
  rBottom.y = real_point.y + real_point.lengthY;
  rBottom.lengthX = rBottom.lengthY = 0.0;

  vp_t vBottom = _getVirtual(rBottom, len, cellSize);
  sector_t sector = _getSector(vBottom, cellSize);

  return sector;
}

interval_t _structures::_getInterval(rp_t real_point, unsigned int len, unsigned int cellSize) {
  sector_t top = _getTop(real_point, len, cellSize);
  sector_t bottom = _getBottom(real_point, len, cellSize);

  interval_t inter; inter.top = top; inter.bottom = bottom;

  return inter;
}
