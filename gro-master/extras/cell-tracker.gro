// ////////////////////////////////////////////////////////////////////////////////////
// 
// gro is protected by the UW OPEN SOURCE LICENSE, which is summarized here.
// Please see the file LICENSE.txt for the complete license.
// 
// THE SOFTWARE (AS DEFINED BELOW) AND HARDWARE DESIGNS (AS DEFINED BELOW) IS PROVIDED
// UNDER THE TERMS OF THIS OPEN SOURCE LICENSE (“LICENSE”).  THE SOFTWARE IS PROTECTED
// BY COPYRIGHT AND/OR OTHER APPLICABLE LAW.  ANY USE OF THIS SOFTWARE OTHER THAN AS
// AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.
// 
// BY EXERCISING ANY RIGHTS TO THE SOFTWARE AND/OR HARDWARE PROVIDED HERE, YOU ACCEPT AND
// AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE.  TO THE EXTENT THIS LICENSE MAY BE
// CONSIDERED A CONTRACT, THE UNIVERSITY OF WASHINGTON (“UW”) GRANTS YOU THE RIGHTS
// CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS.
//  
// TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
// 
// 

include gro

dummy := if ( ARGC != 4 ) then {
  print ( "Expected two numeric arguments for max cell count and initial gfp level\n" ),
  exit()
} else {} end; // note that you need to assign the value of this statement to a dummy
               // variable to avoid having {} printed to standard output.
 
time_limit := atoi ( ARGV[2] );
sample_period := atoi ( ARGV[3] );

program p() := {

  gfp := 0;
  r := [ t := 0, s := 0 ];

  rate ( 0.5 * volume ) : { gfp := gfp + 1 }

  r.s > sample_period : {
    print ( {id,r.t,gfp/volume}, "," ),
    r.s := 0
  }

  true : { r.s := r.s + dt, r.t := r.t + dt }

};

ecoli ( [], program p() );

program main() := {

  t := 0;
  print ( "{" );

  true : { t := t + dt }
  
  t > time_limit : {
    print ( "{-1,0,0}}\n" ), // this is just to balance commas
    exit()
  } 
 
};