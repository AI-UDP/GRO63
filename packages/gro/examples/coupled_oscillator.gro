//
// gro is protected by the UW OPEN SOURCE LICENSE, which is summarized here.
// Please see the file LICENSE.txt for the complete license.
//
// THE SOFTWARE (AS DEFINED BELOW) AND HARDWARE DESIGNS (AS DEFINED BELOW) IS PROVIDED
// UNDER THE TERMS OF THIS OPEN SOURCE LICENSE (“LICENSE”).  THE SOFTWARE IS PROTECTED
// BY COPYRIGHT AND/OR OTHER APPLICABLE LAW.  ANY USE OF THIS SOFTWARE OTHER THAN AS
// AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.
//
// BY EXERCISING ANY RIGHTS TO THE SOFTWARE AND/OR HARDWARE PROVIDED HERE, YOU ACCEPT AND
// AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE.  TO THE EXTENT THIS LICENSE MAY BE
// CONSIDERED A CONTRACT, THE UNIVERSITY OF WASHINGTON (“UW”) GRANTS YOU THE RIGHTS
// CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS.
//
// TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//


include gro // coded by Kevin Oishi!

chemostat(true);
set_theme ( dark_theme );

set ("dt",0.1);

s := signal (1,1.05);

k0 := 2.5;  // base rate of oscillation
kb := 5;    // cell-cell feedback strength
tr := 10;   // refractory period length
se := 650;  // signal emit magnitude

GO := 0;
WAIT := 1;

program oscillator(g0) := {
  gfp := 0.5*volume*g0;

  p := [mode := GO, t := 0, x := g0];

  true : {gfp := 0.5*volume * p.x}

  // advance the oscillation phase
  p.mode = GO & rate (k0) : {p.x := p.x + 0.01*(150-p.x)}
  p.mode = GO & rate(kb*get_signal(s)) : {p.x := p.x + 0.01*(150-p.x)}

  // phase reset
  p.x > 100 : {
    p.x := 0,
    p.mode := WAIT,
    emit_signal(s, se)
  }

  // refractory period timer
  p.mode = WAIT : {p.t := p.t+dt}
  p.mode = WAIT & p.t > tr : {
    p.mode := GO,
    p.t := 0
  }
};

ecoli ( [x:=0, y:=0], program oscillator(0));

program main() := {

  n := 0;

  rate(0.01) : {snapshot("c:\oscillator" <> tostring(n) <> ".tif"), n:=n+1}

  skip();

};
