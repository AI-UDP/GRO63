// /////////////////////////////////////////////////////////////////////////////////////
// 
// gro is protected by the UW OPEN SOURCE LICENSE, which is summarized here.
// Please see the file LICENSE.txt for the complete license.
// 
// THE SOFTWARE (AS DEFINED BELOW) AND HARDWARE DESIGNS (AS DEFINED BELOW) IS PROVIDED
// UNDER THE TERMS OF THIS OPEN SOURCE LICENSE (“LICENSE”).  THE SOFTWARE IS PROTECTED
// BY COPYRIGHT AND/OR OTHER APPLICABLE LAW.  ANY USE OF THIS SOFTWARE OTHER THAN AS
// AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.
// 
// BY EXERCISING ANY RIGHTS TO THE SOFTWARE AND/OR HARDWARE PROVIDED HERE, YOU ACCEPT AND
// AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE.  TO THE EXTENT THIS LICENSE MAY BE
// CONSIDERED A CONTRACT, THE UNIVERSITY OF WASHINGTON (“UW”) GRANTS YOU THE RIGHTS
// CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS.
//  
// TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
// 
// 

include gro

dummy := if ( ARGC != 4 ) then {
  print ( "Expected two numeric arguments for max cell count and initial gfp level\n" ),
  exit()
} else {} end; // note that you need to assign the value of this statement to a dummy
               // variable to avoid having {} printed to standard output.
 
maxpop := atoi ( ARGV[2] );
gfp0 := atoi ( ARGV[3] );

set ( "population_max", maxpop + 100 );

program p() := {

  gfp := gfp0;
  rate ( 1 ) : { gfp := gfp + 1 }

};

ecoli ( [], program p() );

program main() := {

  L := {};

  true : {
    L := maptocells gfp end
  }

  length(L) > maxpop : {
    print ( L, "\n" ),
    exit()
  }

};
