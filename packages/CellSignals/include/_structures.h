/*
 * Copyright (C) Sandra Sáez Raspeño - All Rights Reserved
 *
 * This file is part of Cellsignals.
 *
 * All information contained in this package is, and remains the property of
 * Sandra Sáez Raspeño. Copy and distribution of CellSignals or any result
 * generated by it is strictly forbidden unless prior written permission is
 * obtained from Sandra Sáez Raspeño.
 */

/**********************************************************************/
/*                                                                    */
/*                      AUXILIAR GRID STRUCTURES                      */
/*                                                                    */
/**********************************************************************/

#include <string>
#include <vector>

namespace _structures {
  
struct rp_t {
  float x;
  float y;
  float lengthX;
  float lengthY;
};

struct vp_t {
  float x;
  float y;
};

struct sector_t {
  unsigned int row;
  unsigned int col;
};

struct interval_t {
  sector_t top;
  sector_t bottom;
};

// Struct that represents all the information needed in the simulation
/* struct simulation_info { */
/*   // Size of each cell */
/*   unsigned int size = 5; */
/*   // Number of cells */
/*   unsigned int len = 10; */
/*   // tipo de vecindad */
/*   int neighborhood = 8; */
/*   // tipo de grid */
/*   std::string grid_type; */
/*   // matrix */
/*   std::vector<std::vector<float> > matrix; */
/*   // proportion */
/*   float proportion; */
/*   // radio */
/*   unsigned int radio; */
/*   // variation */
/*   float variation; */
/*   // ciclos */
/*   int cycles = 1; */
/*   // min diffusion value */
/*   double min_diff_value = 0.1; */
/*   // diffusion method */
/*   std::string diff_method; */
/* }; */

/********************* Conversion functions **************************/

float _getCentre(unsigned int len, unsigned int cellSize); 
vp_t _getVirtual(rp_t real_point, unsigned int len, unsigned int cellSize);
sector_t _getSector(vp_t virtual_point, unsigned int cellSize);
 vp_t _getTopV(rp_t real_point, unsigned int len, unsigned int cellSize);
vp_t _getBottomV(rp_t real_point, unsigned int len, unsigned int cellSize);
sector_t _getTop(rp_t real_point, unsigned int len, unsigned int cellSize);
sector_t _getBottom(rp_t real_point, unsigned int len, unsigned int cellSize);
interval_t _getInterval(rp_t point, unsigned int len, unsigned int cellSize);

}
