/*
 * Copyright (C) Sandra Sáez Raspeño - All Rights Reserved
 *
 * This file is part of Cellsignals.
 *
 * All information contained in this package is, and remains the property of
 * Sandra Sáez Raspeño. Copy and distribution of CellSignals or any result
 * generated by it is strictly forbidden unless prior written permission is
 * obtained from Sandra Sáez Raspeño.
 */

/**********************************************************************/
/*                                                                    */
/*                    GRID CLASS DEFINITION                           */
/*                                                                    */
/**********************************************************************/

//#include "CSCell.h"
#include "DBCell.h"
#include "CSCell.h"
//#include "BlockCell.h"
#include "GSignal.h"
#include "GReaction.h"
#include "_structures.h"
#include <algorithm>
#include <vector>
#include <map>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <random>

#define DIFF_THRESHOLD 0.1

using namespace std;
using namespace _structures;

template <class C>
class Grid {
 private:
  unsigned int size;
  unsigned int len;
  int neighborhood;

  //_structures::simulation_info info;
  std::vector<std::vector<C*> > grid;
  std::vector<GSignal*> sig;
  std::vector<GReaction*> reactions;
  
 public:
  //Grid(unsigned int len=10, unsigned int cellSize=5);
  Grid(unsigned int len=10, unsigned int cellSize=5, int neighborhood=8);
  //Grid(int block_capacity, unsigned int len=10, unsigned int cellSize=5, int neighborhood=8);
  ~Grid();

  /******************** Getters and Setters **************************/
  
  unsigned int getLen();
  unsigned int getCellSize();
  int getNeighborhood();
  std::vector<std::vector<C*> > getGrid();
  std::vector<GSignal*> getSignalsVector();
  std::vector<GReaction*> getReactionVector();
  void setLen(unsigned int newLen);
  void setSize(unsigned int newSize);
  void setNeighborhood(int newNeigh);
  void setGrid(std::vector<std::vector<C*> > newGrid);
  void setSignalsVector(std::vector<GSignal*> newVec);
  void setSignalMatrix(int signal_id, std::vector<std::vector<float> > newMatrix);

  /******************** Auxiliary functions *************************/

  std::vector<C*> create_and_fill_vector(unsigned int len);
  unsigned int _getCellsInter(interval_t inter);
  bool _outOfBounds(_structures::vp_t vpoint);
  unsigned int _maxCellsToResize(_structures::vp_t point, _structures::vp_t top, _structures::vp_t bottom);
  unsigned int _cellsToResize(_structures::vp_t vpoint);
  bool _existSignal(int id);
  bool _signalReachBorder();
  float _cellsToResizeBySignals();
  double _signalC(int id, unsigned int row, unsigned int col);

  std::vector<C*> _getNonEmptyNeighbors(int id, unsigned int mainRow, unsigned int mainCol);
  std::vector<std::tuple<unsigned int, unsigned int> > _getNeighbors(int mainRow, int mainCol);
  std::tuple<std::tuple<unsigned int, unsigned int>, unsigned int> _getRandomNeighbor(std::vector<std::tuple<unsigned int, unsigned int>> neighbors);
  void _applyDegradation(int id, int mainRow, int mainCol, double kdeg);

 /**************** Auxiliary functions -- Signals *********************/

  void _find_and_setTimer(unsigned int row, unsigned int col, int signal_id);
  void _emit(unsigned int row, unsigned int col, int id, double concentration);
  void _absorb(unsigned int row, unsigned int col, int id, double concentration);
  
  /*************** Member functions -- Grid functions ***************/
  
  double getCentre();
  C* getCell(unsigned int row, unsigned int col);
  void resize(unsigned int nCells);  
  
 /************* Member functions -- Signals functions ***************/

  void add_signal(int id, double kdiff, double kdeg, std::vector<std::vector<float> > matrix, int cycles=1);
  void add_signal(int id, double kdiff, double kdeg, int cycles=1);
  void emit_signal(int id, double concentration, double coords[], std::string mode);
  //  void emit_signal_average(int id, double concentration, double coords[]);
  void absorb_signal(int id, double concentration, double coords[], std::string mode);
  //void absorb_signal_average(int id, double concentration, double coords[]);
  //void absorb_signal_random(int id, double concentration, double coords[]);
  double getSignalValue(int id, double coords[], std::string mode);
  //double getSignalValueRange(int id, double coords[]);
  void setSignalValue(int id, double concentration, double coords[], std::string mode);


 /************* Member functions -- Reaction functions ***************/

  void add_reaction(float rate, std::vector<int> reactants, std::vector<int> products); 

/******************* Diffusion methods ***************************/

  void original_diff(float dt);
  void matrix_diff(float dt);
  void random_walk_block(float probability);
  void random_walk(float probability);
  void proportional_random_walk(float proportion);

/******************* Reaction methods ***************************/

  void reaction(float dt);
  
/******************* Update grid function ************************/
  
  void update(std::string method, float opt);
};
